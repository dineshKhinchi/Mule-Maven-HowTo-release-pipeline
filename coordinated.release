"""
NAME: Example Coordinated Release Pipeline
DESCRIPTION:
- Used by devops to deploy a set of application and version. Uses bash shell.

REQUIRES:
- Standard Suggested Jenkins plugins
- Pipeline Utility Steps

"""
def logSeparator = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"

def abort(String message)
{
    echo "Aborting pipeline..."
    currentBuild.result = 'ABORTED'
    error(message)
}

def log(String message)
{
    echo "++++++++++++++++++++++++++ [ ${message} ]"
}

def deployCloudHub(String groupId, String artifactId, String version, String targetEnvironment, String dlb, String workers, String workerSize, String usr, String pwd, String settingsFile) {
    sh "${MVN} mule:deploy -Dmule.artifact=" + artifactId + "-" + version + "-mule-application.jar -Pcloudhub -Denv=" + targetEnvironment + " -P" + dlb + " -Dch.workers=" + workers + " -Dch.workerType=" + workerSize + " -Du=" + usr + " -Dp=" + pwd + " -s " + settingsFile
}

def deployRTF(String groupId, String artifactId, String version, String targetEnvironment, String workers, String workerSize, String usr, String pwd, String settingsFile) {
  def cpuReserved = '.5'
  def cpuLimit = '1' 
    if (workerSize.equalsIgnoreCase("MICRO")) {
      cpuReserved = '.1'
      cpuLimit = '1'
    } else if (workerSize.equalsIgnoreCase("SMALL")) {
      cpuReserved = '.2'
      cpuLimit = '1'
    } else if (workerSize.equalsIgnoreCase("MEDIUM")) {
      cpuReserved = '1'
      cpuLimit = '1'
    } else if (workerSize.equalsIgnoreCase("LARGE")) {
      cpuReserved = '2'
      cpuLimit = '2'
    } else if (workerSize.equalsIgnoreCase("XLARGE")) {
      cpuReserved = '4'
      cpuLimit = '4'
    } else if (workerSize.equalsIgnoreCase("XXLARGE")) {
      cpuReserved = '8'
      cpuLimit = '8'
    } else if (workerSize.equalsIgnoreCase("4XLARGE")) {
      cpuReserved = '16'
      cpuLimit = '16'
    } else {
      error('Unknown worker size: ' + workerSize)
    }
    sh "${MVN} mule:deploy -Dmule.artifact=" + artifactId + "-" + version + "-mule-application.jar -Prtf -Denv=" + targetEnvironment + " -Drtf.cpuReserved=" + cpuReserved + " -Drtf.cpuLimit=" + cpuLimit + " -Du=" + usr + " -Dp=" + pwd + " -s " + settingsFile
}

def deployStandalone(String groupId, String artifactId, String version, String targetEnvironment, String usr, String pwd, String settingsFile) {
    sh "${MVN} mule:deploy -Dmule.artifact=" + artifactId + "-" + version + "-mule-application.jar -Phybrid -Denv=" + targetEnvironment + " -Du=" + usr + " -Dp=" + pwd + " -s " + settingsFile
}

def deploy(String groupId, String artifactId, String version, String targetEnvironment, deploymentModel, String workers, String workerSize, String usr, String pwd, String settingsFile) {

	sh "${MVN} dependency:copy -Dartifact=" + groupId + ":" + artifactId + ":" + version + ":pom -DoutputDirectory=./ -B -Du=" + usr + " -Dp=" + pwd + " -s " + settingsFile
	sh "${RENAME} " + artifactId + "-" + version + ".pom pom.xml"
	
	if (deploymentModel.equalsIgnoreCase("CloudHub public-lb")) {
 	    sh "${MVN} dependency:copy -Dartifact=" + groupId + ":" + artifactId + ":" + version + ":jar:mule-application -DoutputDirectory=./ -B -Du=" + usr + " -Dp=" + pwd + " -s " + settingsFile
            deployCloudHub( groupId,  artifactId,  version,  targetEnvironment,  'public-lb', workers, workerSize,  usr,  pwd,  settingsFile)
    } else if (deploymentModel.equalsIgnoreCase("CloudHub dlb")) {
 	    sh "${MVN} dependency:copy -Dartifact=" + groupId + ":" + artifactId + ":" + version + ":jar:mule-application -DoutputDirectory=./ -B -Du=" + usr + " -Dp=" + pwd + " -s " + settingsFile
            deployCloudHub( groupId,  artifactId,  version,  targetEnvironment,  'dlb', workers, workerSize,  usr,  pwd,  settingsFile)
    } else if (deploymentModel.equalsIgnoreCase("RTF")) {
        deployRTF( groupId,  artifactId,  version,  targetEnvironment, workers, workerSize,  usr,  pwd,  settingsFile)
    } else if (deploymentModel.equalsIgnoreCase("Standalone")) {
 	    sh "${MVN} dependency:copy -Dartifact=" + groupId + ":" + artifactId + ":" + version + ":jar:mule-application -DoutputDirectory=./ -B -Du=" + usr + " -Dp=" + pwd + " -s " + settingsFile
            deployStandalone( groupId,  artifactId,  version,  targetEnvironment,  usr,  pwd,  settingsFile)
    } else {
        error('Unknown deployment Model: ' + deploymentModel)
	}	
}

pipeline {
agent  any
 
    parameters {
      choice (name: 'targetEnvironment', choices: ['dev', 'test', 'prd'], description: 'Deploy to environment')
      string (name: 'muleSettings', defaultValue: '/opt/maven/settings/np-settings.xml', trim: true, description: 'The settings.xml file to use for deployments (is required).')
      string (name: 'gitURLprefix', defaultValue: 'git@github.com:mulesoft-consulting', trim: true, description: 'The Git url prefix used to checkout source code (is required).')
    }

    environment {
        ANYPOINT = credentials('ANYPOINT_PLATFORM_CREDENTIALS')
        MULE_SETTINGS = '/opt/maven/settings/np-settings.xml'
        MVN = 'mvn'
        GIT = 'git'
        RENAME = 'mv'
        
        groupId = '50228d0d-2c1f-4548-9c8a-90c0ebb480b3'
        
    }


stages {

stage ('Deploy') {
    steps {
        script {
          dir ("deploy") {
        	deploy("${groupId}", "peter-dunworth-testing", "1.1.0", "${targetEnvironment}", "CloudHub public-lb", "1", "MICRO", "${ANYPOINT_USR}", "${ANYPOINT_PSW}", "${muleSettings}")
       	    deploy("50228d0d-2c1f-4548-9c8a-90c0ebb480b3", "peter-dunworth-testing", "1.1.1", "test", "CloudHub public-lb", "1", "MICRO", "${ANYPOINT_USR}", "${ANYPOINT_PSW}", "${muleSettings}")
          }
        }
}}

}

}
